<section xml:id="web_parsing-xml">
        <title>Parsing XML</title>
        
        
        <p xml:id="web_index-0">Look at the code below and predict what will be printed.</p>

        <exercise>
            <statement>
    <p>csp-10-2-1: What is the last thing (last line of text) that will be printed when the code below runs? <var/>  </p></statement><setup><var><condition string="^\s*['&quot;]?Attr\s*$"><feedback><p>['"]?yes['"]?: It prints <q>Attr: </q> plus the value of the hide attribute in the email tag.</p></feedback></condition><condition string="^\s*['&quot;]?yes['&quot;]?\s*$"><feedback><p>Something will be printed before the value. Look at the print statement again.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>What is the value of the hide attribute?</p></feedback></condition></var></setup></exercise>        <p>Here is a simple application that parses some XML and extracts some data
            elements from the XML:</p>

<exercise label="xml_parse_person_ac1">
    <statement>
        <p>Run this to see what it prints.</p>

    </statement>
    <program xml:id="xml_parse_person_ac1_editor" interactive="activecode" language="python3">
        <input>
import xml.etree.ElementTree as ET

data = '''
<person>
  <name>Chuck</name>
  <phone type="intl">
    +1 734 303 4456
  </phone>
  <email hide="yes"/>
</person>'''

tree = ET.fromstring(data)
print('Name:', tree.find('name').text)
print('Attr:', tree.find('email').get('hide'))
        </input>
    </program>
</exercise>
        <p>The triple single quote (<c>'''</c>), as well as the triple double quote (<c>"""</c>),
            allow for the creation of strings in Python that span multiple lines.</p>
        <p>Calling <c>fromstring</c> converts the string representation of
            the XML into a <q>tree</q> of XML elements. When the XML is in a tree,
            we have a series of methods we can call to extract portions
            of data from the XML string.  The <c>find</c> function searches
            through the XML tree and retrieves the element that matches
            the specified tag. The <c>get</c> gets the value of the attribute in that tag.</p>
        <p>Using an XML parser such as <c>ElementTree</c> has the advantage
            that while the XML in this example is quite simple, it turns out there
            are many rules regarding valid XML, and using <c>ElementTree</c>
            allows us to extract data from XML without worrying about the rules of
            XML syntax.</p>
        <subsection xml:id="web_using-get-to-get-the-value-of-an-attribute">
            <title>Using <c>get</c> to get the value of an attribute</title>
            <p>Why do we use <c>get</c> to get the value of an attribute?</p>
            <p>Look at the code below and predict what will be printed.</p>

        <exercise>
            <statement>
    <p>csp-10-2-3: What is the last thing (last line of text) that will be printed when the code below runs? <var/>  </p></statement><setup><var><condition string="^\s*['&quot;]?Attr\s*$"><feedback><p>None[""]?: The default is to print None if there is no attribute with that name when you use <c>.get('name')</c>.</p></feedback></condition><condition string="^\s*['&quot;]?None['&quot;]?\s*$"><feedback><p>Something will be printed before the value. Look at the print statement again.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>What is the default value when there is no attribute with that name?</p></feedback></condition></var></setup></exercise>
<exercise label="xml_parse_person_wihtout_attr_ac1">
    <statement>
            <p>Run this to see what it prints.</p>

    </statement>
    <program xml:id="xml_parse_person_wihtout_attr_ac1_editor" interactive="activecode" language="python3">
        <input>
import xml.etree.ElementTree as ET

data = '''
<person>
  <name>Chuck</name>
  <phone type="intl">
    +1 734 303 4456
  </phone>
  <email>csev@umich.edu</email>
</person>'''

tree = ET.fromstring(data)
print('Name:', tree.find('name').text)
print('Attr:', tree.find('email').get('hide'))
        </input>
    </program>
</exercise>
            <note>
                <p>Just like with dictionaries we can use <c>get</c> to get the value of an attribute and if the attribute isn't there the default is to return <c>None</c>.</p>
            </note>
        </subsection>
        <subsection xml:id="web_getting-data-from-the-first-element-of-a-type-in-xml">
            <title>Getting Data from the First Element of a Type in XML</title>
            <p>You can use <c>find</c> to get the first element of the XML of a specified type.
                You can the use <c>find</c> on that element to get children tags of that element.</p>

<exercise label="xml_parse_book_data">
    <statement>
            <p>Run the code to see what this prints.</p>

    </statement>
    <program xml:id="xml_parse_book_data_editor" interactive="activecode" language="python3">
        <input>
import xml.etree.ElementTree as ET

data = '''
    <bookstore>
        <book category="cooking">
            <title lang="en">Everyday Italian</title>
            <author>Giada De Laurentiis</author>
            <year calendar="Gregorian">2005</year>
            <price>30.00</price>
        </book>

        <book category="CHILDREN">
            <title lang="en">Harry Potter</title>
            <author>J K. Rowling</author>
            <year>2005</year>
            <price>29.99</price>
        </book>
</bookstore>
'''

tree = ET.fromstring(data)
book = tree.find('book')
print('Author:', book.find('author').text)
print('Lang:',book.find('title').get('lang'))
        </input>
    </program>
</exercise>
            <p>What do you think would happen if we looked for the first &#8216;author' in <c>tree</c> rather than in <c>book</c>?  Modify the code to see what happens.</p>
        </subsection>
        <subsection xml:id="web_fixing-errors-in-xml">
            <title>Fixing Errors in XML</title>
            <p>If your XML has errors, what do you think will happen?</p>

<exercise label="xml_parse_fix_book_data">
    <statement>
            <p>The following XML has errors.  Try to run the code first to see what happens and then fix the XML so that the code runs correctly.</p>

    </statement>
    <program xml:id="xml_parse_fix_book_data_editor" interactive="activecode" language="python3">
        <input>
import xml.etree.ElementTree as ET

data = '''
    &lt;bookstore&gt;
        &lt;book category="mystery"&gt;
            &lt;title lang="en"&gt;The Personal Librarian
            &lt;author&gt;Giada Marie Benedict&lt;author&gt;
            &lt;year calendar=Gregorian&gt;2021&lt;/year&gt;
            &lt;price&gt;19.85&lt;/price&gt;
        &lt;book\&gt;
    &lt;/bookstore&gt;
'''

tree = ET.fromstring(data)
book = tree.find('book')
print('Author:', book.find('author').text)
print('Title:', book.find('title').text)
print('Lang:',book.find('title').get('lang'))
        </input>
    </program>
</exercise>

<exercise label="xml_parse_fix_note_data">
    <statement>
            <p>The following XML has errors.  Try to run the code first to see what happens and then fix the XML so that the code runs correctly.</p>

    </statement>
    <program xml:id="xml_parse_fix_note_data_editor" interactive="activecode" language="python3">
        <input>
import xml.etree.ElementTree as ET

data = '''
    &lt;messages&gt;
        &lt;note id="p501"&gt;
            &lt;time region="EST"&gt;11:00am&lt;/time&gt;
            Tove&lt;/to&gt;
            &lt;from&gt;Jani&lt;/from&gt;
            &lt;heading&gt;Reminder&lt;/heading&gt;
            &lt;/body&gt;Don't forget me this weekend!&lt;/body&gt;
        &lt;/note&gt;

        &lt;note id="p502"&gt;
            &lt;time region=EST&gt;1:00pm&lt;/time&gt;
            &lt;to&gt;Jani&lt;/to&gt;
            &lt;from&gt;Tove
            &lt;heading&gt;Re: Reminder&lt;/heading&gt;
            &lt;body&gt;I will not!&lt;body&gt;
        &lt;/note&gt;
    &lt;/messages&gt;
'''

tree = ET.fromstring(data)
note = tree.find('note')
print('to:', note.find('to').text)
print('body:', note.find('body').text)
print('time region:',note.find('time').get('region'))
        </input>
    </program>
</exercise>
        </subsection>
        <subsection xml:id="web_write-code-to-process-xml">
            <title>Write Code to Process XML</title>

<exercise label="xml_parse_write_code_book_data_ac">
    <statement>
            <p>Write code to print the book title, category, author, and year.</p>

    </statement>
    <program xml:id="xml_parse_write_code_book_data_ac_editor" interactive="activecode" language="python3">
        <input>
import xml.etree.ElementTree as ET

data = '''
    <bookstore>
        <book category="Cultural Heritage Fiction">
            <title lang="en">The Turner House</title>
            <author>Angela Flournoy</author>
            <year>2016</year>
        </book>
    </bookstore>
'''
        </input>
    </program>
</exercise>

<exercise label="xml_parse_write_code_note_data_ac">
    <statement>
            <p>Write code to print the note's to, from, body, and time (with region).</p>

    </statement>
    <program xml:id="xml_parse_write_code_note_data_ac_editor" interactive="activecode" language="python3">
        <input>
import xml.etree.ElementTree as ET


data = '''
    &lt;messages&gt;
        &lt;note id="p501"&gt;
            &lt;time region="EST"&gt;11:00am&lt;/time&gt;
            &lt;to&gt;Zihan&lt;/to&gt;
            &lt;from&gt;Xinyin&lt;/from&gt;
            &lt;heading&gt;Reminder&lt;/heading&gt;
            &lt;/body&gt;Don't forget the talk!&lt;/body&gt;
        &lt;/note&gt;
'''
        </input>
    </program>
</exercise>
        </subsection>
    </section>

